{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the mouseTube documentation","text":"<p>This documentation covers an introduction, a description of the vocalizations page, and the backend API of the mouseTube project, which is based on Django.</p> <ul> <li>Vocalizations</li> <li>API Python</li> <li>API REST</li> </ul>"},{"location":"#what-is-mousetube","title":"What is mouseTube?","text":"<p>Rodents communicate using various sensory modalities: olfaction (scent marking, glands), vision (postures), touch (contacts), and hearing (vocalizations). These vocalizations are mostly emitted in the ultrasonic range, beyond human perception (Anderson, 1954; Brudzynski, 2005, Brudsynski, 2021; Portfors, 2007; Schweinfurth, 2020).</p> <p>Ultrasonic vocalizations (USVs) are produced in various contexts:</p> <ul> <li>\ud83d\udc2d Isolated pups during early life  </li> <li>\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 Social interactions in juveniles and adults  </li> <li>\u2642\ufe0f Males in presence of females  </li> <li>\ud83d\ude30 Situations of stress, reward anticipation, or exploration</li> </ul> <p>These USVs serve as:</p> <ul> <li> <p>Markers of motivation and social communication   (Fischer &amp; Hammerschmidt, 2010; Schweinfurth, 2020)</p> </li> <li> <p>Indicators of stress or anxiety susceptibility   (Brudzynski, 2005)</p> </li> </ul> <p>They are routinely measured in neuropsychiatric research models (Premoli et al., 2023).</p> <p>To address this complexity and data requirement, we developed mouseTube: a database for sharing, archiving, and analyzing rodent USVs, following the FAIR principles (Wilkinson et al., 2016):</p> <ul> <li>\ud83d\udd0d Findable  </li> <li>\ud83d\udd13 Accessible  </li> <li>\ud83d\udd04 Interoperable  </li> <li>\u267b\ufe0f Reusable</li> </ul>"},{"location":"#mousetube-publications","title":"MouseTube Publications","text":"<ul> <li> <p>Torquet N., de Chaumont F., Faure P., Bourgeron T., Ey E. mouseTube \u2013 a database to collaboratively unravel mouse ultrasonic communication F1000Research 2016, 5:2332 https://doi.org/10.12688/f1000research.9439.1</p> </li> <li> <p>Ferhat A. T., Torquet N., Le Sourd A. M., de Chaumont F., Olivo-Marin J. C., Faure P., Bourgeron T., Ey E. Recording Mouse Ultrasonic Vocalizations to Evaluate Social Communication J. Vis. Exp. (112), e53871 https://dx.doi.org/10.3791/53871</p> </li> </ul>"},{"location":"#follow-mousetube-on-mastodon","title":"Follow mouseTube on Mastodon","text":"<p>\ud83d\udc49 @mousetube on Mastodon</p>"},{"location":"vocalizations/","title":"Vocalizations","text":"<p>The Vocalizations page provides detailed information about various audio files related to mouse vocalizations in experiments. The page allows users to search for specific recordings with a filter to display only active links, which is selected by default. You can also change the number of items displayed per page for easier navigation.</p>"},{"location":"vocalizations/#fields-in-each-vocalization-entry","title":"Fields in Each Vocalization Entry","text":"<ul> <li>\ud83d\udcdd Name: The name of the subject, in this case, it refers to the specific mouse involved.</li> <li>\ud83d\udc2d Strain: The strain of the mouse used in the experiment.</li> <li>\ud83d\udcd1 Protocol Name: Describes the experimental setup, such as Male-Female interaction.</li> </ul>"},{"location":"vocalizations/#subject-information","title":"Subject Information","text":"<ul> <li>\ud83d\udcda Background: Information about the mouse's genetic background (e.g., C57BL/6J).</li> <li>\ud83d\udd17 Bibliography: A link to the reference or further reading.</li> <li>\u2642\ufe0f/\u2640\ufe0f Sex: The biological sex of the mouse.</li> <li>\ud83d\udd22 Group: The group classification of the experiment (e.g., Temporal structure).</li> <li>\ud83e\uddec Genotype: The genetic makeup of the mouse (e.g., +/+).</li> </ul>"},{"location":"vocalizations/#protocol-information","title":"Protocol Information","text":"<ul> <li>\ud83d\udd2c Protocol Name: The name of the experiment (e.g., Male-Female interaction).</li> <li>\ud83d\udcc2 Number of Files: The total number of related files.</li> <li>\ud83d\udcdc Description: A brief description of the experimental setup.</li> </ul>"},{"location":"vocalizations/#experiment-details","title":"Experiment Details","text":"<ul> <li>\ud83d\udcca Experiment Name: The name of the experiment (e.g., Temporal structure).</li> <li>\ud83d\udd22 Group: The group classification of the experiment (e.g., Temporal structure).</li> <li>\ud83d\udcc5 Date: The date the experiment was conducted.</li> <li>#\ufe0f\u20e3 File Number: The specific file number within the experiment.</li> <li>\ud83c\udf21\ufe0f Temperature: The temperature settings during the experiment.</li> <li>\ud83d\udca1 Light Cycle: The light cycle (e.g., day).</li> <li>\ud83c\udfa4 Microphone: The type of microphone used in the recording (e.g., Avisoft CM16/CMPA).</li> </ul> <p>Additionally, you can \u2b07\ufe0f download the vocalization files directly from the page, making it easier to access the data for further analysis or archiving.</p>"},{"location":"api/python/","title":"Reference Python","text":""},{"location":"api/python/#mousetube_api.models","title":"<code>mousetube_api.models</code>","text":""},{"location":"api/python/#mousetube_api.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>Model</code></p> <p>Represents a user of the system.</p> <p>Attributes:</p> Name Type Description <code>name_user</code> <code>str</code> <p>The last name of the user.</p> <code>first_name_user</code> <code>str</code> <p>The first name of the user.</p> <code>email_user</code> <code>str</code> <p>The email address of the user.</p> <code>unit_user</code> <code>str</code> <p>The unit the user belongs to.</p> <code>institution_user</code> <code>str</code> <p>The institution the user belongs to.</p> <code>address_user</code> <code>str</code> <p>The address of the user.</p> <code>country_user</code> <code>str</code> <p>The country of the user.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>class User(models.Model):\n    \"\"\"\n    Represents a user of the system.\n\n    Attributes:\n        name_user (str): The last name of the user.\n        first_name_user (str): The first name of the user.\n        email_user (str): The email address of the user.\n        unit_user (str, optional): The unit the user belongs to.\n        institution_user (str, optional): The institution the user belongs to.\n        address_user (str, optional): The address of the user.\n        country_user (str, optional): The country of the user.\n    \"\"\"\n\n    name_user = models.CharField(max_length=255)\n    first_name_user = models.CharField(max_length=255)\n    email_user = models.CharField(max_length=255)\n    unit_user = models.CharField(max_length=255, blank=True, null=True)\n    institution_user = models.CharField(max_length=255, blank=True, null=True)\n    address_user = models.CharField(max_length=255, blank=True, null=True)\n    country_user = models.CharField(max_length=255, blank=True, null=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns the full name of the user.\n\n        Returns:\n            str: The full name of the user.\n        \"\"\"\n        return f\"{self.first_name_user} {self.name_user}\"\n</code></pre>"},{"location":"api/python/#mousetube_api.models.User.__str__","title":"<code>__str__()</code>","text":"<p>Returns the full name of the user.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The full name of the user.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns the full name of the user.\n\n    Returns:\n        str: The full name of the user.\n    \"\"\"\n    return f\"{self.first_name_user} {self.name_user}\"\n</code></pre>"},{"location":"api/python/#mousetube_api.models.Strain","title":"<code>Strain</code>","text":"<p>               Bases: <code>Model</code></p> <p>Represents a strain of a mouse.</p> <p>Attributes:</p> Name Type Description <code>name_strain</code> <code>str</code> <p>The name of the strain.</p> <code>background</code> <code>str</code> <p>The genetic background of the strain.</p> <code>biblio_strain</code> <code>str</code> <p>Bibliographical references related to the strain.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>class Strain(models.Model):\n    \"\"\"\n    Represents a strain of a mouse.\n\n    Attributes:\n        name_strain (str): The name of the strain.\n        background (str): The genetic background of the strain.\n        biblio_strain (str, optional): Bibliographical references related to the strain.\n    \"\"\"\n\n    name_strain = models.CharField(max_length=255, unique=True)\n    background = models.CharField(max_length=255)\n    biblio_strain = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns the name of the strain as a string.\n\n        Returns:\n            str: The name of the strain.\n        \"\"\"\n        return self.name_strain\n\n    class Meta:\n        verbose_name = \"Strain\"\n        verbose_name_plural = \"Strains\"\n</code></pre>"},{"location":"api/python/#mousetube_api.models.Strain.__str__","title":"<code>__str__()</code>","text":"<p>Returns the name of the strain as a string.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The name of the strain.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns the name of the strain as a string.\n\n    Returns:\n        str: The name of the strain.\n    \"\"\"\n    return self.name_strain\n</code></pre>"},{"location":"api/python/#mousetube_api.models.Subject","title":"<code>Subject</code>","text":"<p>               Bases: <code>Model</code></p> <p>Represents a subject (mouse) in the system.</p> <p>Attributes:</p> Name Type Description <code>name_subject</code> <code>str</code> <p>The name of the subject.</p> <code>strain_subject</code> <code>Strain</code> <p>The strain associated with the subject.</p> <code>origin_subject</code> <code>str</code> <p>The origin of the subject.</p> <code>sex_subject</code> <code>str</code> <p>The sex of the subject.</p> <code>group_subject</code> <code>str</code> <p>The group the subject belongs to.</p> <code>genotype_subject</code> <code>str</code> <p>The genotype of the subject.</p> <code>treatment</code> <code>str</code> <p>The treatment applied to the subject.</p> <code>user</code> <code>User</code> <p>The user associated with the subject.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>class Subject(models.Model):\n    \"\"\"\n    Represents a subject (mouse) in the system.\n\n    Attributes:\n        name_subject (str): The name of the subject.\n        strain_subject (Strain): The strain associated with the subject.\n        origin_subject (str, optional): The origin of the subject.\n        sex_subject (str, optional): The sex of the subject.\n        group_subject (str, optional): The group the subject belongs to.\n        genotype_subject (str, optional): The genotype of the subject.\n        treatment (str, optional): The treatment applied to the subject.\n        user (User): The user associated with the subject.\n    \"\"\"\n\n    name_subject = models.CharField(max_length=255, unique=True)\n    strain_subject = models.ForeignKey(Strain, on_delete=models.CASCADE)\n    origin_subject = models.CharField(max_length=255, blank=True, null=True)\n    sex_subject = models.CharField(max_length=255, blank=True, null=True)\n    group_subject = models.CharField(max_length=255, blank=True, null=True)\n    genotype_subject = models.CharField(max_length=255, blank=True, null=True)\n    treatment = models.CharField(max_length=255, blank=True, null=True)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n\n    def __str__(self):\n        \"\"\"\n        Returns the name of the subject.\n\n        Returns:\n            str: The name of the subject.\n        \"\"\"\n        return self.name_subject\n\n    class Meta:\n        verbose_name = \"Subject\"\n        verbose_name_plural = \"Subjects\"\n</code></pre>"},{"location":"api/python/#mousetube_api.models.Subject.__str__","title":"<code>__str__()</code>","text":"<p>Returns the name of the subject.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The name of the subject.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns the name of the subject.\n\n    Returns:\n        str: The name of the subject.\n    \"\"\"\n    return self.name_subject\n</code></pre>"},{"location":"api/python/#mousetube_api.models.Protocol","title":"<code>Protocol</code>","text":"<p>               Bases: <code>Model</code></p> <p>Represents an experimental protocol.</p> <p>Attributes:</p> Name Type Description <code>name_protocol</code> <code>str</code> <p>The name of the protocol.</p> <code>number_files</code> <code>int</code> <p>The number of files associated with the protocol.</p> <code>protocol_description</code> <code>str</code> <p>A description of the protocol.</p> <code>user</code> <code>User</code> <p>The user associated with the protocol.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>class Protocol(models.Model):\n    \"\"\"\n    Represents an experimental protocol.\n\n    Attributes:\n        name_protocol (str): The name of the protocol.\n        number_files (int, optional): The number of files associated with the protocol.\n        protocol_description (str): A description of the protocol.\n        user (User): The user associated with the protocol.\n    \"\"\"\n\n    name_protocol = models.CharField(max_length=255)\n    number_files = models.IntegerField(blank=True, null=True)\n    protocol_description = models.TextField(default=\"\")\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n\n    def __str__(self):\n        \"\"\"\n        Returns the name of the protocol.\n\n        Returns:\n            str: The name of the protocol.\n        \"\"\"\n        return self.name_protocol\n\n    class Meta:\n        verbose_name = \"Protocol\"\n        verbose_name_plural = \"Protocols\"\n</code></pre>"},{"location":"api/python/#mousetube_api.models.Protocol.__str__","title":"<code>__str__()</code>","text":"<p>Returns the name of the protocol.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The name of the protocol.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns the name of the protocol.\n\n    Returns:\n        str: The name of the protocol.\n    \"\"\"\n    return self.name_protocol\n</code></pre>"},{"location":"api/python/#mousetube_api.models.Experiment","title":"<code>Experiment</code>","text":"<p>               Bases: <code>Model</code></p> <p>Represents an experiment.</p> <p>Attributes:</p> Name Type Description <code>name_experiment</code> <code>str</code> <p>The name of the experiment.</p> <code>protocol</code> <code>Protocol</code> <p>The protocol associated with the experiment.</p> <code>group_subject</code> <code>str</code> <p>The group of subjects involved in the experiment.</p> <code>date_experiment</code> <code>date</code> <p>The date of the experiment.</p> <code>temperature</code> <code>str</code> <p>The temperature during the experiment.</p> <code>light_cycle</code> <code>str</code> <p>The light cycle during the experiment.</p> <code>microphone</code> <code>str</code> <p>The microphone used in the experiment.</p> <code>acquisition_hardware</code> <code>str</code> <p>The hardware used for acquisition.</p> <code>acquisition_software</code> <code>str</code> <p>The software used for acquisition.</p> <code>sampling_rate</code> <code>float</code> <p>The sampling rate of the data.</p> <code>bit_depth</code> <code>float</code> <p>The bit depth of the data.</p> <code>laboratory</code> <code>str</code> <p>The laboratory where the experiment was conducted.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>class Experiment(models.Model):\n    \"\"\"\n    Represents an experiment.\n\n    Attributes:\n        name_experiment (str): The name of the experiment.\n        protocol (Protocol): The protocol associated with the experiment.\n        group_subject (str, optional): The group of subjects involved in the experiment.\n        date_experiment (date, optional): The date of the experiment.\n        temperature (str, optional): The temperature during the experiment.\n        light_cycle (str, optional): The light cycle during the experiment.\n        microphone (str, optional): The microphone used in the experiment.\n        acquisition_hardware (str, optional): The hardware used for acquisition.\n        acquisition_software (str, optional): The software used for acquisition.\n        sampling_rate (float, optional): The sampling rate of the data.\n        bit_depth (float, optional): The bit depth of the data.\n        laboratory (str, optional): The laboratory where the experiment was conducted.\n    \"\"\"\n\n    name_experiment = models.CharField(max_length=255, unique=True)\n    protocol = models.ForeignKey(Protocol, on_delete=models.CASCADE)\n    group_subject = models.CharField(max_length=255, blank=True, null=True)\n    date_experiment = models.DateField(blank=True, null=True)\n    temperature = models.CharField(max_length=255, blank=True, null=True)\n    light_cycle = models.CharField(max_length=255, blank=True, null=True)\n    microphone = models.CharField(max_length=255, blank=True, null=True)\n    acquisition_hardware = models.CharField(max_length=255, blank=True, null=True)\n    acquisition_software = models.CharField(max_length=255, blank=True, null=True)\n    sampling_rate = models.FloatField(blank=True, null=True)\n    bit_depth = models.FloatField(blank=True, null=True)\n    laboratory = models.CharField(max_length=255, blank=True, null=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns the name of the experiment.\n\n        Returns:\n            str: The name of the experiment.\n        \"\"\"\n        return self.name_experiment\n\n    class Meta:\n        verbose_name = \"Experiment\"\n        verbose_name_plural = \"Experiments\"\n</code></pre>"},{"location":"api/python/#mousetube_api.models.Experiment.__str__","title":"<code>__str__()</code>","text":"<p>Returns the name of the experiment.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The name of the experiment.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns the name of the experiment.\n\n    Returns:\n        str: The name of the experiment.\n    \"\"\"\n    return self.name_experiment\n</code></pre>"},{"location":"api/python/#mousetube_api.models.File","title":"<code>File</code>","text":"<p>               Bases: <code>Model</code></p> <p>Represents a file associated with an experiment or subject.</p> <p>Attributes:</p> Name Type Description <code>experiment</code> <code>Experiment</code> <p>The experiment associated with the file.</p> <code>subject</code> <code>Subject</code> <p>The subject associated with the file.</p> <code>file_number</code> <code>int</code> <p>The number of the file.</p> <code>link_file</code> <code>str</code> <p>The URL link to the file.</p> <code>notes_file</code> <code>str</code> <p>Notes about the file.</p> <code>doi_file</code> <code>str</code> <p>The DOI of the file.</p> <code>is_valid_link</code> <code>bool</code> <p>Whether the link is valid.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>class File(models.Model):\n    \"\"\"\n    Represents a file associated with an experiment or subject.\n\n    Attributes:\n        experiment (Experiment, optional): The experiment associated with the file.\n        subject (Subject, optional): The subject associated with the file.\n        file_number (int, optional): The number of the file.\n        link_file (str, optional): The URL link to the file.\n        notes_file (str, optional): Notes about the file.\n        doi_file (str, optional): The DOI of the file.\n        is_valid_link (bool): Whether the link is valid.\n    \"\"\"\n\n    experiment = models.ForeignKey(\n        Experiment, on_delete=models.CASCADE, blank=True, null=True\n    )\n    subject = models.ForeignKey(\n        Subject, on_delete=models.CASCADE, blank=True, null=True\n    )\n    file_number = models.IntegerField(blank=True, null=True)\n    link_file = models.URLField(blank=True, null=True)\n    notes_file = models.TextField(blank=True, null=True)\n    doi_file = models.CharField(max_length=255, blank=True, null=True)\n    is_valid_link = models.BooleanField(default=False)\n\n    def __str__(self):\n        \"\"\"\n        Returns the link to the file.\n\n        Returns:\n            str: The URL link to the file.\n        \"\"\"\n        return self.link_file\n\n    class Meta:\n        verbose_name = \"File\"\n        verbose_name_plural = \"Files\"\n</code></pre>"},{"location":"api/python/#mousetube_api.models.File.__str__","title":"<code>__str__()</code>","text":"<p>Returns the link to the file.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The URL link to the file.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns the link to the file.\n\n    Returns:\n        str: The URL link to the file.\n    \"\"\"\n    return self.link_file\n</code></pre>"},{"location":"api/python/#mousetube_api.models.PageView","title":"<code>PageView</code>","text":"<p>               Bases: <code>Model</code></p> <p>Represents a page view for tracking purposes.</p> <p>Attributes:</p> Name Type Description <code>path</code> <code>str</code> <p>The path of the page.</p> <code>date</code> <code>date</code> <p>The date of the page view.</p> <code>count</code> <code>int</code> <p>The number of views for the page on the given date.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>class PageView(models.Model):\n    \"\"\"\n    Represents a page view for tracking purposes.\n\n    Attributes:\n        path (str): The path of the page.\n        date (date): The date of the page view.\n        count (int): The number of views for the page on the given date.\n    \"\"\"\n\n    path = models.CharField(max_length=255)\n    date = models.DateField(auto_now_add=True)\n    count = models.PositiveIntegerField(default=0)\n\n    class Meta:\n        unique_together = (\"path\", \"date\")\n\n    def __str__(self):\n        \"\"\"\n        Returns a string representation of the page view.\n\n        Returns:\n            str: The path, date, and count of the page view.\n        \"\"\"\n        return f\"{self.path} - {self.date} ({self.count})\"\n</code></pre>"},{"location":"api/python/#mousetube_api.models.PageView.__str__","title":"<code>__str__()</code>","text":"<p>Returns a string representation of the page view.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The path, date, and count of the page view.</p> Source code in <code>mousetube_api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns a string representation of the page view.\n\n    Returns:\n        str: The path, date, and count of the page view.\n    \"\"\"\n    return f\"{self.path} - {self.date} ({self.count})\"\n</code></pre>"},{"location":"api/rest/","title":"API REST","text":""},{"location":"api/rest/#interactive-rest-api-documentation-for-mousetube","title":"Interactive REST API Documentation for mouseTube","text":"<p>Welcome to the interactive documentation for the mouseTube REST API. You can explore and interact with the API directly through the Swagger UI below.</p> <p> </p>"}]}